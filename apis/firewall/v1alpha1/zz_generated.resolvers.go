/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/linode/provider-linode/apis/instance/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Device.
func (mg *Device) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromIntPtrValue(mg.Spec.ForProvider.EntityID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.EntityIDRef,
		Selector:     mg.Spec.ForProvider.EntityIDSelector,
		To: reference.To{
			List:    &v1alpha1.InstanceList{},
			Managed: &v1alpha1.Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EntityID")
	}
	mg.Spec.ForProvider.EntityID = reference.ToIntPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EntityIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromIntPtrValue(mg.Spec.ForProvider.FirewallID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FirewallIDRef,
		Selector:     mg.Spec.ForProvider.FirewallIDSelector,
		To: reference.To{
			List:    &DeviceList{},
			Managed: &Device{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FirewallID")
	}
	mg.Spec.ForProvider.FirewallID = reference.ToIntPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FirewallIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Firewall.
func (mg *Firewall) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromIntPtrValues(mg.Spec.ForProvider.Linodes),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.LinodesRefs,
		Selector:      mg.Spec.ForProvider.LinodesSelector,
		To: reference.To{
			List:    &v1alpha1.InstanceList{},
			Managed: &v1alpha1.Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Linodes")
	}
	mg.Spec.ForProvider.Linodes = reference.ToIntPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.LinodesRefs = mrsp.ResolvedReferences

	return nil
}
