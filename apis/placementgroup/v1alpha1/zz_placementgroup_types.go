/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MembersInitParameters struct {
}

type MembersObservation struct {

	// Whether all Linodes in this group are currently compliant with the group's placement group type.
	IsCompliant *bool `json:"isCompliant,omitempty" tf:"is_compliant,omitempty"`

	// The ID of the Linode.
	LinodeID *float64 `json:"linodeId,omitempty" tf:"linode_id,omitempty"`
}

type MembersParameters struct {
}

type PlacementGroupInitParameters struct {

	// The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
	// The label of the Placement Group.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Whether Linodes must be able to become compliant during assignment. (Default strict)
	// Whether this Placement Group has a strict compliance policy.
	PlacementGroupPolicy *string `json:"placementGroupPolicy,omitempty" tf:"placement_group_policy,omitempty"`

	// The placement group type to use when placing Linodes in this group.
	// The placement group type for Linodes in this Placement Group.
	PlacementGroupType *string `json:"placementGroupType,omitempty" tf:"placement_group_type,omitempty"`

	// The region of the Placement Group.
	// The region of the Placement Group.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type PlacementGroupObservation struct {

	// The ID of the Placement Group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether all Linodes in this group are currently compliant with the group's placement group type.
	// Whether all Linodes in this Placement Group are currently compliant.
	IsCompliant *bool `json:"isCompliant,omitempty" tf:"is_compliant,omitempty"`

	// The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
	// The label of the Placement Group.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// A set of Linodes currently assigned to this Placement Group.
	Members []MembersObservation `json:"members,omitempty" tf:"members,omitempty"`

	// Whether Linodes must be able to become compliant during assignment. (Default strict)
	// Whether this Placement Group has a strict compliance policy.
	PlacementGroupPolicy *string `json:"placementGroupPolicy,omitempty" tf:"placement_group_policy,omitempty"`

	// The placement group type to use when placing Linodes in this group.
	// The placement group type for Linodes in this Placement Group.
	PlacementGroupType *string `json:"placementGroupType,omitempty" tf:"placement_group_type,omitempty"`

	// The region of the Placement Group.
	// The region of the Placement Group.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type PlacementGroupParameters struct {

	// The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
	// The label of the Placement Group.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Whether Linodes must be able to become compliant during assignment. (Default strict)
	// Whether this Placement Group has a strict compliance policy.
	// +kubebuilder:validation:Optional
	PlacementGroupPolicy *string `json:"placementGroupPolicy,omitempty" tf:"placement_group_policy,omitempty"`

	// The placement group type to use when placing Linodes in this group.
	// The placement group type for Linodes in this Placement Group.
	// +kubebuilder:validation:Optional
	PlacementGroupType *string `json:"placementGroupType,omitempty" tf:"placement_group_type,omitempty"`

	// The region of the Placement Group.
	// The region of the Placement Group.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// PlacementGroupSpec defines the desired state of PlacementGroup
type PlacementGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PlacementGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PlacementGroupInitParameters `json:"initProvider,omitempty"`
}

// PlacementGroupStatus defines the observed state of PlacementGroup.
type PlacementGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PlacementGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PlacementGroup is the Schema for the PlacementGroups API. Manages a Linode Placement Group.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type PlacementGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.label) || (has(self.initProvider) && has(self.initProvider.label))",message="spec.forProvider.label is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.placementGroupType) || (has(self.initProvider) && has(self.initProvider.placementGroupType))",message="spec.forProvider.placementGroupType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	Spec   PlacementGroupSpec   `json:"spec"`
	Status PlacementGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PlacementGroupList contains a list of PlacementGroups
type PlacementGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PlacementGroup `json:"items"`
}

// Repository type metadata.
var (
	PlacementGroup_Kind             = "PlacementGroup"
	PlacementGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PlacementGroup_Kind}.String()
	PlacementGroup_KindAPIVersion   = PlacementGroup_Kind + "." + CRDGroupVersion.String()
	PlacementGroup_GroupVersionKind = CRDGroupVersion.WithKind(PlacementGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&PlacementGroup{}, &PlacementGroupList{})
}
