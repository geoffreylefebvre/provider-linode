/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/linode/provider-linode/apis/instance/v1alpha1"
	v1alpha11 "github.com/linode/provider-linode/apis/placementgroup/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this PlacementGroupAssignment.
func (mg *PlacementGroupAssignment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.LinodeID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LinodeIDRef,
		Selector:     mg.Spec.ForProvider.LinodeIDSelector,
		To: reference.To{
			List:    &v1alpha1.InstanceList{},
			Managed: &v1alpha1.Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LinodeID")
	}
	mg.Spec.ForProvider.LinodeID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LinodeIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.PlacementGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PlacementGroupIDRef,
		Selector:     mg.Spec.ForProvider.PlacementGroupIDSelector,
		To: reference.To{
			List:    &v1alpha11.PlacementGroupList{},
			Managed: &v1alpha11.PlacementGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PlacementGroupID")
	}
	mg.Spec.ForProvider.PlacementGroupID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PlacementGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.LinodeID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.LinodeIDRef,
		Selector:     mg.Spec.InitProvider.LinodeIDSelector,
		To: reference.To{
			List:    &v1alpha1.InstanceList{},
			Managed: &v1alpha1.Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LinodeID")
	}
	mg.Spec.InitProvider.LinodeID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LinodeIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.PlacementGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PlacementGroupIDRef,
		Selector:     mg.Spec.InitProvider.PlacementGroupIDSelector,
		To: reference.To{
			List:    &v1alpha11.PlacementGroupList{},
			Managed: &v1alpha11.PlacementGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PlacementGroupID")
	}
	mg.Spec.InitProvider.PlacementGroupID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PlacementGroupIDRef = rsp.ResolvedReference

	return nil
}
